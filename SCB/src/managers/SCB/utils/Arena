/*     */ package Pauldg7.plugins.SCB.managers;
/*     */ 
/*     */ import Pauldg7.plugins.SCB.main.SCB;
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.logging.Logger;
/*     */ import org.bukkit.Bukkit;
/*     */ import org.bukkit.ChatColor;
/*     */ import org.bukkit.Location;
/*     */ import org.bukkit.Material;
/*     */ import org.bukkit.World;
/*     */ import org.bukkit.block.Block;
/*     */ import org.bukkit.block.Sign;
/*     */ import org.bukkit.configuration.file.FileConfiguration;
/*     */ import org.bukkit.configuration.file.YamlConfiguration;
/*     */ import org.bukkit.entity.Player;
/*     */ import org.bukkit.plugin.Plugin;
/*     */ import org.bukkit.scoreboard.DisplaySlot;
/*     */ import org.bukkit.scoreboard.Objective;
/*     */ import org.bukkit.scoreboard.Score;
/*     */ import org.bukkit.scoreboard.Scoreboard;
/*     */ import org.bukkit.scoreboard.ScoreboardManager;
/*     */ 
/*     */ public class Arena
/*     */ {
/*  27 */   ArrayList<String> arenaList = new ArrayList();
/*     */ 
/*  30 */   String scb = "§7[§cSCB§7] ";
/*  31 */   Plugin plugin = SCB.getInstance();
/*  32 */   String plyFile = this.plugin.getDataFolder() + File.separator + "players" + File.separator;
/*     */ 
/*  34 */   String araFile = this.plugin.getDataFolder() + File.separator + "arenas" + File.separator;
/*  35 */   public static Arena amanger = new Arena();
/*     */ 
/*  37 */   public static Arena get() { return amanger; }
/*     */ 
/*     */   public void deleteArena(String arena)
/*     */   {
/*  41 */     File f = new File(this.araFile + arena + ".yml");
/*  42 */     if (f.exists()) {
/*  43 */       Config.get().deleteFile(arena);
/*  44 */       this.arenaList.remove(arena);
/*     */     }
/*     */   }
/*     */ 
/*     */   public void enableArena(String arena) {
/*  49 */     if (!this.arenaList.contains(arena)) {
/*  50 */       FileConfiguration cf = Config.get().getArenaConfig(arena);
/*  51 */       cf.set("Enabled", Boolean.valueOf(true));
/*  52 */       this.arenaList.add(arena);
/*     */       try {
/*  54 */         cf.save(Config.get().getArenaFile(arena));
/*     */       } catch (IOException e) {
/*  56 */         e.printStackTrace();
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */   public String[] getArenaList() {
/*  62 */     String[] ars = new String[this.arenaList.size()];
/*  63 */     return (String[])this.arenaList.toArray(ars);
/*     */   }
/*     */   public void disableArena(String arena) {
/*  66 */     if (this.arenaList.contains(arena)) {
/*  67 */       File f = Config.get().getArenaFile(arena);
/*  68 */       FileConfiguration cf = Config.get().getArenaConfig(arena);
/*  69 */       cf.set("Enabled", "false");
/*  70 */       this.arenaList.remove(arena);
/*  71 */       Config.get().saveCustomConfig(f, cf);
/*     */     }
/*     */   }
/*     */ 
/*     */   public void loglocation(Location loc, FileConfiguration c, String name) {
/*  76 */     int locX = loc.getBlockX();
/*  77 */     int locY = loc.getBlockY();
/*  78 */     int locZ = loc.getBlockZ();
/*  79 */     float locP = loc.getPitch();
/*  80 */     float locYa = loc.getYaw();
/*  81 */     String world = loc.getWorld().getName();
/*  82 */     c.set(name + ".X", Integer.valueOf(locX));
/*  83 */     c.set(name + ".Y", Integer.valueOf(locY));
/*  84 */     c.set(name + ".Z", Integer.valueOf(locZ));
/*  85 */     c.set(name + ".P", Float.valueOf(locP));
/*  86 */     c.set(name + ".Ya", Float.valueOf(locYa));
/*  87 */     c.set(name + ".World", world);
/*     */   }
/*     */ 
/*     */   public void createArena(String name, Player p) {
/*  91 */     FileConfiguration c = Config.get().getArenaConfig(name);
/*  92 */     c.set("ArenaName", name);
/*  93 */     c.set("Enabled", "false");
/*  94 */     loglocation(p.getLocation(), c, "Lobby");
/*  95 */     File arenaConfig = new File(this.araFile + name + ".yml");
/*     */     try {
/*  97 */       c.save(arenaConfig);
/*     */     } catch (IOException e) {
/*  99 */       this.plugin.getLogger().info("An error has occured saving arenaconfig at createarena method.");
/* 100 */       e.printStackTrace();
/*     */     }
/*     */   }
/*     */ 
/*     */   public void removeArena(String name) {
/* 105 */     Config.get().deleteFile(name);
/*     */   }
/*     */ 
/*     */   public boolean getArenaEnabled(String arena) {
/* 109 */     if (this.arenaList.contains(arena)) {
/* 110 */       return true;
/*     */     }
/* 112 */     return false;
/*     */   }
/*     */ 
/*     */   public void loadArenas() {
/* 116 */     File file = new File(this.araFile);
/*     */ 
/* 118 */     if (file.exists()) {
/* 119 */       File[] f = new File(this.araFile).listFiles();
/* 120 */       if (f.length > 0)
/* 121 */         for (File arenaFile : f) {
/* 122 */           String arena = arenaFile.getName();
/* 123 */           File farena = new File(this.araFile + arena);
/* 124 */           FileConfiguration fc = YamlConfiguration.loadConfiguration(farena);
/* 125 */           String arenaName = fc.getString("ArenaName");
/* 126 */           if ((fc.getBoolean("Enabled")) && (arenaName != null)) {
/* 127 */             enableArena(arenaName);
/* 128 */             this.plugin.getLogger().info("Enabled Arena " + arenaName);
/*     */           }
/* 130 */           else if (arenaName != null) {
/* 131 */             this.plugin.getLogger().info("Disabled Arena " + arenaName);
/*     */           }
/*     */         }
/*     */     }
/*     */   }
/*     */ 
/*     */   public Location getLocation(String arena, String name)
/*     */   {
/* 141 */     FileConfiguration c = Config.get().getArenaConfig(arena);
/* 142 */     double x = c.getDouble(name + ".X");
/* 143 */     double y = c.getDouble(name + ".Y");
/* 144 */     double z = c.getDouble(name + ".Z");
/* 145 */     double pd = c.getDouble(name + ".P");
/* 146 */     double yad = c.getDouble(name + ".Ya");
/* 147 */     float p = (float)pd;
/* 148 */     float ya = (float)yad;
/* 149 */     String worldname = c.getString(name + ".World");
/* 150 */     World world = Bukkit.getWorld(worldname);
/* 151 */     Location Loc = new Location(world, x, y, z, ya, p);
/* 152 */     return Loc;
/*     */   }
/*     */ 
/*     */   public void resetArenas()
/*     */   {
/*     */   }
/*     */ 
/*     */   public void signUpdate(String arena) {
/* 160 */     FileConfiguration c = Config.get().getArenaConfig(arena);
/* 161 */     int signNum = c.getInt("signs");
/* 162 */     if (Game.get().getPlyNum(arena) == null) {
/* 163 */       Game.get().setPlyNum(arena, 0);
/*     */     }
/* 165 */     for (int i = 1; i <= signNum; i++) {
/* 166 */       World w = Bukkit.getWorld("world");
/* 167 */       Location dumbLoc = new Location(w, 0.0D, 0.0D, 0.0D, 0.0F, 0.0F);
/* 168 */       if ((getLocation(arena, "sign" + Integer.toString(i)) != dumbLoc) && (getLocation(arena, "sign" + Integer.toString(i)).getBlock().getType() != Material.AIR)) {
/* 169 */         Location Loc = getLocation(arena, "sign" + Integer.toString(i));
/* 170 */         Sign s = (Sign)Loc.getBlock().getState();
/* 171 */         if ((s.getLine(0).equalsIgnoreCase(scb)) && (!Game.get().getAIngame(arena))) {
/* 172 */           s.setLine(1, "§4§lJoin");
/* 173 */           s.setLine(3, "(" + Game.get().getPlyNum(arena).toString() + "/4)");
/* 174 */           s.update();
/*     */         }
/* 176 */         else if ((s.getLine(0).equalsIgnoreCase(scb)) && (Game.get().getAIngame(arena))) {
/* 177 */           s.setLine(1, ChatColor.RED + "Join");
/* 178 */           s.setLine(3, "(" + Game.get().getPlyNum(arena).toString() + "/4)");
/* 179 */           s.update();
/*     */         }
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/* 185 */   public void scoreUpdate(String arena) { ScoreboardManager m = Bukkit.getScoreboardManager();
/* 186 */     Scoreboard b = m.getNewScoreboard();
/* 187 */     Objective o = b.registerNewObjective(arena, arena);
/* 188 */     o.setDisplaySlot(DisplaySlot.SIDEBAR);
			  Score score = null;
/* 189 */     Player[] plys = Game.get().getPlys(arena);
/*     */ 
/* 191 */     for (Player p : plys) {
/* 192 */       o.setDisplayName("§6§lLIVES");
				if(p.getDisplayName().length() >= 14)
/* 193 */       score = o.getScore(p.getDisplayName().substring(0, 14) + ":");
				else
				score = o.getScore(p.getDisplayName() + ":");
/* 194 */       score.setScore(PlayerManager.get().getLives(p).intValue());
/*     */     }
/* 196 */     for (Player p : plys)
/* 197 */       p.setScoreboard(b); }
/*     */ 
/*     */   public void scorebRemove(Player p)
/*     */   {
/* 201 */     ScoreboardManager m = Bukkit.getScoreboardManager();
/* 202 */     Scoreboard b = m.getNewScoreboard();
/* 203 */     p.setScoreboard(b);
/*     */   }
/*     */   public void scoreLobbyUpdate(Player p) {
/* 206 */     if (this.plugin.getConfig().getBoolean("OutsideStats")) {
/* 207 */       ScoreboardManager m = Bukkit.getScoreboardManager();
/* 208 */       Scoreboard b = m.getNewScoreboard();
/* 209 */       Objective o = b.registerNewObjective(p.getName(), p.getName());
/* 210 */       o.setDisplaySlot(DisplaySlot.SIDEBAR);
/* 211 */       o.setDisplayName("§6§lSCB");
/* 212 */       File f = new File(this.plyFile + p.getName() + ".yml");
/* 213 */       FileConfiguration fc = YamlConfiguration.loadConfiguration(f);
/* 214 */       Score score = o.getScore("§eTokens:");
/* 215 */       Score score2 = o.getScore("§aWins:");
/* 216 */       Score score3 = o.getScore("§cLosses:");
/* 217 */       score.setScore(fc.getInt("Gems"));
/* 218 */       score2.setScore(fc.getInt("Wins"));
/* 219 */       score3.setScore(fc.getInt("Losses"));
/* 220 */       p.setScoreboard(b);
/*     */     }
/*     */   }
/*     */ 
/* 224 */   public boolean nullC(String s) { if (s != null) {
/* 225 */       return true;
/*     */     }
/* 227 */     return false;
/*     */   }
/*     */ }

/* Location:           /Users/colemanfortson/Downloads/SCB_R2.0 (1).jar
 * Qualified Name:     Pauldg7.plugins.SCB.managers.Arena
 * JD-Core Version:    0.6.2
 */
